import { CollectionConfig } from 'payload/types';
import beforeChangeHook from '../hooks/beforeChange';
import { MuxFormLogicField } from '../components/fields/mux-form-logic';
import afterDeleteHook from '../hooks/afterDelete';
import MuxUploaderField from '../components/fields/mux-uploader/mux-uploader';

export const extendCollectionForMux = (config: CollectionConfig): CollectionConfig => {
  return ({
    ...config,
    access: {
      ...(config.access || {}),
      read: () => true,
      delete: () => true,
    },
    admin: {
      ...(config.admin || {}),
      useAsTitle: 'title',
    },
    upload: {
      ...(typeof config.upload === 'object' && config.upload || {}),
      staticURL: '/uploads',
      staticDir: '/uploads',
      disableLocalStorage: true,
      filesRequiredOnCreate: false,
      mimeTypes: ['video/*'],
      adminThumbnail: ({ doc }) => {
        /* Use Mux's thumbnail url as the admin thumbnail */
        return doc.playbackId ? `https://image.mux.com/${doc.playbackId}/animated.webp?width=256` : null
      },
      // handlers: [

      // ]
      // filesRequiredOnCreate: false
    },
    hooks: {
      // beforeChange: [beforeChangeHook],
      // afterDelete: [afterDeleteHook],
      ...(config.hooks || {}),
      beforeChange: config.hooks?.beforeChange ? (
        Array.isArray(config.hooks.beforeChange) ? [...config.hooks.beforeChange, beforeChangeHook] : [config.hooks.beforeChange, beforeChangeHook]
      ) : [beforeChangeHook],
      afterDelete: config.hooks?.afterDelete ? (
        Array.isArray(config.hooks.afterDelete) ? [...config.hooks.afterDelete, afterDeleteHook] : [config.hooks.afterDelete, afterDeleteHook]
      ) : [afterDeleteHook],
    },
    fields: [
      /* Render mux-uploader */
      {
        name: 'muxUploader',
        type: 'ui',
        admin: {
          components: {
            Field: MuxUploaderField
          }
        }
      },
      /* This hidden field controls form logic for when the built-in file picker is used */
      // {
      //   name: 'formLogic',
      //   type: 'ui',
      //   admin: {
      //     components: {
      //       Field: MuxFormLogicField,
      //       // Todo – how do we remove this field from the filter options?
      //       // Filter: MuxFormLogicFilter,
      //     },
      //   }
      // },
      {
        name: 'title',
        type: 'text',
        label: 'Title',
        required: true,
        admin: {
          // components: {
          //   Field: MuxField
          // },

          description: `A unique title for this video that will help you identify it later.`
        }
      },
      // This field is used for picking a timestamp for the poster image */
      {
        name: 'posterTimestamp',
        type: 'number',
        label: 'Poster Timestamp',
        min: 0,
        admin: {
          description: 'Pick a timestamp (in seconds) from the video to be used as the poster image. When unset, defaults to the middle of the video.',
          // Only show it when playbackId has been set, so users can pick the poster image using the player
          condition: (_, siblingData) => siblingData.playbackId,
          step: 0.25
        },
      },
      ...config.fields,
      {
        name: 'assetId',
        label: 'Asset ID',
        type: 'text',
        admin: {
          readOnly: true,
          description: 'This ID and the following fields are all automatically generated by Mux after uploading the video.'
        },
        required: true
      },
      {
        name: 'playbackId',
        label: 'Playback ID',
        type: 'text',
        admin: {
          readOnly: true,
        },
      },
      {
        name: 'duration',
        label: 'Duration',
        type: 'number',
        admin: {
          readOnly: true,
        },
      },
      {
        name: 'aspectRatio',
        label: 'Aspect Ratio',
        type: 'text',
        admin: {
          readOnly: true,
        },
      },
      {
        name: 'maxWidth',
        type: 'number',
        admin: {
          readOnly: true,
        },
      },
      {
        name: 'maxHeight',
        type: 'number',
        admin: {
          readOnly: true,
        },
      },
    ],
  }
  )
}

export default extendCollectionForMux;